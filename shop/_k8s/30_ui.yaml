##################################################################################################
# shop-ui
##################################################################################################
---
apiVersion: v1
kind: Service
metadata:
  name: shop-ui
  labels:
    app: shop-ui
    service: shop
spec:
  ports:
    - port: 3000
      name: tcp
      appProtocol: http
  selector:
    app: shop-ui
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: shop-ui
  labels:
    account: shop-ui
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shop-ui
  labels:
    app: shop-ui
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shop-ui
      version: v1
  template:
    metadata:
      labels:
        app: shop-ui
        version: v1
    spec:
      serviceAccountName: shop-ui
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      containers:
        - name: shop-ui
          image: node:latest
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              cpu: 1000m
              memory: 1000Mi
            requests:
              cpu: 500m
              memory: 500Mi
          tty: true
          ports:
            - containerPort: 3000
          workingDir: /my-app
          command:
            - "sh"
            - "-c"
            - |
              npm install;
              (npm run prisma migrate dev; echo);
              npm run dev;
          volumeMounts:
            - name: shop-ui-app
              mountPath: /my-app
      initContainers:
        - name: init-env
          image: busybox:1.28
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              echo "" > .env.work
          volumeMounts:
            - name: shop-ui-app
              mountPath: /my-app
        - name: set-env-authjs
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          workingDir: /my-app
          command:
            - sh
            - -c
            - |
              echo 'DATABASE_URL="postgres://$(AUTH_DB_USERNAME):$(AUTH_DB_PASSWORD)@$(AUTH_DB_HOST):$(AUTH_DB_PORT)/$(AUTH_DB_NAME)"' >> .env.work
              echo "NEXTAUTH_URL=$(NEXTAUTH_URL)" >> .env.work
              echo "NEXTAUTH_SECRET=$(NEXTAUTH_SECRET)" >> .env.work
              echo "SMTP_USER=$(SMTP_USERNAME)" >> .env.work
              echo "SMTP_PASSWORD=$(SMTP_PASSWORD)" >> .env.work
              echo "SMTP_HOST=$(SMTP_HOST)" >> .env.work
              echo "SMTP_PORT=$(SMTP_PORT)" >> .env.work
              echo "EMAIL_FROM=$(EMAIL_FROM)" >> .env.work
          env:
            - name: AUTH_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-resource
                  key: POSTGRESQL_USERNAME
            - name: AUTH_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-resource
                  key: POSTGRESQL_PASSWORD
          envFrom:
            - secretRef:
                name: shop-ui
            - configMapRef:
                name: shop-ui
          volumeMounts:
            - name: shop-ui-app
              mountPath: /my-app
        - name: set-env-iam
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          workingDir: /my-app
          command:
            - sh
            - -c
            - |
              apk update
              apk add jq

              base_url=$(IAM_URL)
              admin_username=$(IAM_ADMIN_USERNAME)
              admin_password=$(IAM_ADMIN_PASSWORD)
              realm=$(IAM_REALM)
              client_clientid=$(IAM_CLIENT_CLIENTID)

              until [ $(curl -s -o /dev/null -w '%{http_code}' \
              "$base_url/realms/$realm/protocol/openid-connect/certs") -eq 200 ]; \
              do \
                echo "waiting..."; \
                sleep 5; \
              done; \

              token=$(curl -X POST \
              -d "grant_type=password" \
              -d "client_id=admin-cli" \
              -d "username=$admin_username" \
              -d "password=$admin_password" \
              "$base_url/realms/master/protocol/openid-connect/token")

              access_token=$(echo $token | jq -r '.access_token')

              clients=$(curl \
              -H "Authorization: Bearer $access_token" \
              "$base_url/admin/realms/$realm/clients")

              client_id=$(echo $clients | jq -r '.[] | select(.clientId == "'"$client_clientid"'") | .id')

              client_secret=$(curl -X POST \
              -H "Authorization: Bearer $access_token" \
              "$base_url/admin/realms/$realm/clients/$client_id/client-secret")

              client_secret_value=$(echo $client_secret | jq -r '.value')

              echo "IAM_URL=$base_url" >> .env.work
              echo "IAM_ADMIN_USERNAME=$admin_username" >> .env.work
              echo "IAM_ADMIN_PASSWORD=$admin_password" >> .env.work
              echo "IAM_REALM=$realm" >> .env.work
              echo "IAM_CLIENT_CLIENTID=$client_clientid" >> .env.work
              echo "IAM_CLIENT_SECRET=$client_secret_value" >> .env.work
          env:
            - name: IAM_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: iam-provider
                  key: KEYCLOAK_ADMIN_USER
            - name: IAM_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: iam-provider
                  key: KEYCLOAK_ADMIN_PASSWORD
          envFrom:
            - configMapRef:
                name: shop-ui
          volumeMounts:
            - name: shop-ui-app
              mountPath: /my-app
        - name: finish
          image: curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          workingDir: /my-app
          command:
            - sh
            - -c
            - |
              mv .env.work .env.local
          volumeMounts:
            - name: shop-ui-app
              mountPath: /my-app
      volumes:
        - name: shop-ui-app
          persistentVolumeClaim:
            claimName: shop-ui-app
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shop-ui
data:
  NEXTAUTH_URL: "https://shop-ui.aimerzarashi.com"
  AUTH_DB_HOST: "database-resource"
  AUTH_DB_PORT: "5432"
  AUTH_DB_NAME: "authjs"
  SMTP_HOST: "shop-smtp"
  SMTP_PORT: "1025"
  EMAIL_FROM: "authenticator@aimerzarashi.com"
  IAM_URL: "http://iam-provider:8080"
  IAM_REALM: "aimerzarashi"
  IAM_CLIENT_CLIENTID: "shop"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shop-ui-app
  labels:
    app: shop-ui
spec:
  storageClassName: shop-ui-app
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
